#!/usr/bin/env node
const chalk = require('chalk')
const chroma = require('chroma-js')
const fs = require('fs')
const os = require('os')
const program = require('commander')
const system = require('child_process')
const util = require('util')
const yaml = require('js-yaml')

const writeFilePromise = util.promisify(fs.writeFile)

// GLOBAL UTILS
function log(color, message, ...messages) {
  console.log(chalk[color](message + messages.join(' ')))
}

function getYaml(path) {
  return yaml.safeLoad(fs.readFileSync(path, 'utf8'))
}

/**
* Function to issue bash commands, returns the stdout.
* @param command
* @returns {string} stdout
*/
function exec(command) {
  try {
    return system.execSync(command).toString().trim()
  } catch (error) {
    return ''
  }
}

// HELPER UTILS

function getRandomNumber(length) {
  return (Array(length)
    .fill(0)
    .map(() => String(Math.random()).split('').slice(2, 3))
    .flat()
    .join('')
  )
}

function getWallpapersDirectory(config) {
  return `${os.homedir()}/${config.global.wallpaper_directory}`
}

function getColorschemePath() {
  return `${os.homedir()}/.cache/wal/colors.yml`
}


function getFilesWithString(srcPath, searchPath, string) {
  const command = `find "${__dirname}/${srcPath}" -type d -iwholename "${searchPath}" -exec rg -l "${string}" {} \\;`
  const files = exec(command)
  return files ? files.split('\n') : [ ]
}

function getColorStringFromType(color, type) {
  if (type === 'rgb') {
    return `${color[0]}, ${color[1]}, ${color[2]}`
  } else {
    return color
  }
}

function getAdjustedColor(color, type, adjustments) {
  return adjustments.reduce((acc, cur) => {
    const { method, amount } = cur
    return chroma(acc)[method](amount)[type]()
  }, color)
}

function getMappedColorList(colorPrimary, type, list, adjustments) {
  return list.map(colorOld => {
    const colorOldHSL = chroma(colorOld).hsl()
    const colorNewHue = chroma(colorPrimary).hsl()[0]
    const colorNewHSL = colorOldHSL.map((item, index) => index === 0 ? colorNewHue : item)
    const colorNewOriginalType = chroma.hsl(colorNewHSL)[type]()
    const colorNewAdjusted = adjustments
      ? getAdjustedColor(colorNewOriginalType, type, adjustments)
      : colorNewOriginalType

    return colorNewAdjusted
  })
}

// PROGRAM GETTERS

function getImageFromUser(program, config) {
  if (program.interactive) {
    return getImageInteractive(config)
  } else if (program.random) {
    console.log('random: not implemented yet')
  } else if (program.file) {
    console.log('file: not implemented yet')
  }
}

function getImageInteractive(config) {
  const dir = getWallpapersDirectory(config)
  const interactivePick = `${dir}/._interactive`
  // Launches an interactive terminal to pick the wallaper
  exec(`touch ${interactivePick}`)
  exec(`kitty ranger ${dir} --choosefile=${interactivePick}`)
  // Grabs the path to the picked image by the previous command
  const pickedWallpaper = fs.readFileSync(interactivePick, 'utf8')

  return pickedWallpaper
}

function getColorScheme(wallpaperPath, config) {
  const { wal } = config
  const { backend, saturate } = wal
  // Triggers the program that extract the colors
  log('green', `Getting color scheme from image at ${wallpaperPath}`)
  exec(`wal -n --backend ${backend} --saturate ${saturate} -i "${wallpaperPath}"`)
  // Grabs the colors from the file exported by the previous command
  const colorSchemePath = getColorschemePath()
  const colorScheme = getYaml(colorSchemePath)

  return colorScheme
}

function getTemplateRenderData(colorScheme, config) {
  const oldData = config.colors.render
  
  const newData = oldData.map((renderItem) => {
    if (!renderItem.replace) {
      // TODO: useful warning messages should be shown here
      return renderItem
    }

    const { srcPath, destPath } = renderItem

    const replace = renderItem.replace.map(replaceItem => {
      const { adjust, colors, type, use, search } = replaceItem
      const searchPaths = search ? search : ['']
  
      if (!type) {
        // TODO: useful warning messages should be shown here
        return replaceItem
      }
    
      if (!colors) {
        // TODO: useful warning messages should be shown here
        return replaceItem
      }

      const colorPrimary = colorScheme.colors[`${use}`]
      const colorsNew = getMappedColorList(colorPrimary, type, colors, adjust)
  
      return searchPaths.map(searchPath => {

        return colors.map((color, index) => {

          const colorOld = getColorStringFromType(color, type)          
          const colorNew = getColorStringFromType(colorsNew[index], type)

          const files = getFilesWithString(srcPath, searchPath, colorOld)

          return files.map(file => {
            const srcPathRegex = new RegExp(`.*${srcPath}/`)
            const fileDest = file.replace(srcPathRegex, `${os.homedir()}/${destPath}/`)

            return {
              colorOld,
              colorNew,
              file: fileDest
            }
          })
        })
      })
    })
    .flat(Infinity)
    .sort((a, b) => {
      if (a.file < b.file) return -1
      if (a.file > b.file) return 1
      return 0
    })
    .reduce((acc, cur, index) => {
      const { file, colorOld, colorNew } = cur
      const colors = [colorOld, colorNew]

      if (index > 0) {
        const fileIndex = acc.findIndex(item => item.file === file)

        if (fileIndex !== -1) {
          acc[fileIndex].colors.push(colors)
        } else {
          acc.push({ file, colors: [colors] })
        }

        return acc
      } else {
        return [{ file, colors: [colors] }]
      }
    }, [])

    return { srcPath, destPath, replace }
  })

  return newData
}

function getIsValidFormat(wallpaperPath, config) {
  const validFormats = config.global.valid_formats
  return validFormats.filter(format => {
    return wallpaperPath.includes(format)
  }).length > 0
}

// PROGRAM SETTERS

async function setTemplates(templateRenderData) {
  return new Promise((resolve, reject) => {
    const replacementsPromises = templateRenderData.filter(({ srcPath, destPath, replace }) => {
      // Copy files to destination
      const src = `${__dirname}/${srcPath}`
      const dest = `${os.homedir()}/${destPath}`
      
      log('gray', `Copying template from ${src} to ${dest}`)
      exec(`mkdir -p ${dest}`)
      exec(`cp -rf ${src}/* ${dest}`)

      // Filter out templates with no replace directives
      return Array.isArray(replace)
    }).map(({ replace }) => {
      // Replace old colors with new colors in template files
      return replace.map(item => {
        return new Promise((res, rej) => {
          const { file, colors } = item
  
          fs.readFile(file, 'utf8', (err, data) => {
            if (err) {
              log('red', err)
            }
  
            const result = colors.reduce((acc, color) => {
              return acc.replace(new RegExp(color[0], 'gm'), color[1])
            }, data)
  
            writeFilePromise(file, result, 'utf8')
            .then(() => {
              res()
            })
            .catch((error) => {
              rej(error)
            })
          })
        })
      })
    }).flat(Infinity)

    log('gray', `Rendering template files`)

    Promise.all(replacementsPromises).then(() => {
      resolve()
    }).catch(error => {
      reject(error)
    })
  })

}

function setGnome(wallpaperPath) {
  log('green', `Setting wallpaper to ${wallpaperPath}`)
  exec(`gsettings set org.gnome.desktop.background picture-uri "file://${wallpaperPath}"`)
  exec(`gsettings set org.gnome.desktop.screensaver picture-uri "file://${wallpaperPath}"`)

  
  log('green', `Reloading GTK Theme`)
  const themeDelim = '____'
  const themeSuffix = getRandomNumber(12)

  const gtkTheme = exec(`gsettings get org.gnome.desktop.interface gtk-theme | cut -d\\' -f2`)
  const gtkThemeFixed = gtkTheme.replace(/_+\d+$/, '')
  const gtkThemeNew =  gtkThemeFixed + themeDelim + themeSuffix

  exec(`find ~/.themes/ -iname "*${themeDelim}*" -exec rm {} \\;`)
  exec(`ln -sf ~/.themes/${gtkThemeFixed} ~/.themes/${gtkThemeNew}`)

  exec(`gsettings set org.gnome.desktop.interface gtk-theme ${gtkThemeFixed}`)
  exec(`sleep 1`)
  exec(`gsettings set org.gnome.desktop.interface gtk-theme ${gtkThemeNew}`)

  
  log('green', `Reloading Icon Theme`)
  const iconTheme = exec(`gsettings get org.gnome.desktop.interface icon-theme | cut -d\\' -f2`)
  const iconThemeFixed = iconTheme.replace(/_+\d+$/, '')
  const iconThemeNew = iconThemeFixed + themeDelim + themeSuffix

  exec(`find ~/.icons/ -iname "*${themeDelim}*" -exec rm {} \\;`)
  exec(`ln -sf ~/.icons/${iconThemeFixed} ~/.icons/${iconThemeNew}`)

  exec(`gsettings set org.gnome.desktop.interface icon-theme ${iconThemeFixed}`)
  exec(`sleep 1`)
  exec(`gsettings set org.gnome.desktop.interface icon-theme ${iconThemeNew}`)

  
  log('green', `Reloading Shell Theme`)
  exec(`gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval 'Main.loadTheme();'`)

  // TODO: this borks gdm, fix before using
  // log('green', `Reloading Login Theme`)
  // const gnomeShellPath = `${os.homedir()}/.themes/${gtkThemeFixed}/gnome-shell`
  // const gResourcesFileList = exec(`find  ${gnomeShellPath} -type f \\( -name "*.svg" -o -name "*.css" \\)`)
  // const gResourcesXMLPath = `${gnomeShellPath}/gnome-shell-theme.gresource.xml`
  // const gResourcesXML = `
  // <?xml version=\"1.0\" encoding=\"UTF-8\"?>
  // <gresources>
  //   <gresource prefix=\"/org/gnome/shell/theme\">
  //     ${gResourcesFileList
  //     .split('\n')
  //     .map((file, index) => {
  //       const indent = index > 0 ? '      ' : ''
  //       return indent + '<file>' + file + '</file>'
  //     })
  //     .join('\n')
  //   }
  //   </gresource>
  // </gresources>
  // `.trim()

  // fs.writeFileSync(gResourcesXMLPath, gResourcesXML)
  // exec(`glib-compile-resources --sourcedir=${gnomeShellPath} ${gResourcesXMLPath}`)
  // exec(`sudo cp -sf ${gResourcesXMLPath.replace(/.xml$/, '')} /usr/share/gnome-shell/gnome-shell-theme.gresource`)
}

function setSpotify() {
  log('green', `Reloading Spotify Theme`)
  exec(`${__dirname}/oomoxify/oomoxify.sh ~/.cache/wal/colors-oomox`)
}

// PROGRAM BODY

async function main() {
  const config = getYaml(`${__dirname}/config.yaml`)

  program
    .option('-i, --interactive', 'Interactive Mode: Select an image to use.')
    .option('-r, --random', 'Random Mode: Randomly selects an image to use.')
    .option('-f, --file <image path>', 'File Mode: Path to image file is used.')
    .parse(process.argv)

  const wallpaperPath = getImageFromUser(program, config)

  if (!wallpaperPath) {
    program.outputHelp()
    process.exit()
  }

  const isValidFormat = getIsValidFormat(wallpaperPath, config)

  if (!isValidFormat) {
    log('red', 'Your wallpaper did not match the list of valid formats')
    process.exit()
  }

  const colorScheme = getColorScheme(wallpaperPath, config)
  const templateRenderData = getTemplateRenderData(colorScheme, config)

  await setTemplates(templateRenderData)

  // setGnome(wallpaperPath)
  // setSpotify()
}

try {
  main()
} catch (error) {
  log('red', error)
}